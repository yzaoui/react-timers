{"version":3,"sources":["serviceWorker.ts","component/TimerForm.tsx","component/TimerActionButton.tsx","component/TimerComponent.tsx","component/EditableTimer.tsx","component/EditableTimerList.tsx","component/ToggleableTimerForm.tsx","component/TimersDashboard.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","TimerFormAction","TimerForm","title","props","timer","project","handleTitleChange","e","setState","target","value","handleProjectChange","handleSubmitClick","onFormSubmit","handleCancelClick","onFormCancel","className","type","this","onChange","onClick","actionToString","action","React","Component","Create","Update","TimerActionButton","timerIsRunning","onStartClick","onStopClick","TimerComponent","forceUpdateInterval","handleStartClick","handleStopClick","setInterval","forceUpdate","clearInterval","timeString","onEditClick","onDeleteClick","runningSince","elapsedms","totalElapsedMS","Date","now","millisecondsToHourMinuteSecond","ms","Math","floor","map","num","join","EditableTimer","editing","handleFormUpdate","onTimerUpdate","handleFormCancel","handleEditClick","onTimerDelete","onTimerStart","onTimerStop","EditableTimerList","timers","id","key","ToggleableTimerForm","expanded","onFormOpen","handleFormSubmit","onSubmitNewForm","TimersDashboard","UUID","handleTimerUpdate","timerToUpdate","getTimer","updatedFields","updateTimer","Object","assign","handleTimerDelete","filter","handleSubmitNewForm","newTimer","concat","handleTimerStart","timerToStart","handleTimerStop","timerToStop","Error","timeSinceStart","find","undefined","updatedTimer","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6b6fcc82.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { ChangeEventHandler } from \"react\";\n\nexport enum TimerFormAction {\n    Create, Update\n}\n\ninterface Props {\n    timer?: Timer;\n    action: TimerFormAction;\n    onFormSubmit: (title: string, project: string) => void;\n    onFormCancel: () => void;\n}\n\ninterface State {\n    title: string;\n    project: string;\n}\n\nclass TimerForm extends React.Component<Props, State> {\n    readonly state: Readonly<State> = {\n        title: this.props.timer ? this.props.timer.title : \"\",\n        project: this.props.timer ? this.props.timer.project : \"\"\n    };\n\n    render() {\n        return <div className=\"ui centered card\">\n            <div className=\"content\">\n                <div className=\"ui form\">\n                    <div className=\"field\">\n                        <label>Title</label>\n                        <input type=\"text\" value={this.state.title} onChange={this.handleTitleChange} />\n                    </div>\n                    <div className=\"field\">\n                        <label>Project</label>\n                        <input type=\"text\" value={this.state.project} onChange={this.handleProjectChange} />\n                    </div>\n                    <div className=\"ui two bottom attached buttons\">\n                        <button className=\"ui basic blue button\" onClick={this.handleSubmitClick}>{actionToString(this.props.action)}</button>\n                        <button className=\"ui basic red button\" onClick={this.handleCancelClick}>Cancel</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n\n    handleTitleChange: ChangeEventHandler<HTMLInputElement> = (e) => this.setState({ title: e.target.value || \"\" });\n\n    handleProjectChange: ChangeEventHandler<HTMLInputElement> = (e) => this.setState({ project: e.target.value || \"\" });\n\n    handleSubmitClick = () => this.props.onFormSubmit(this.state.title, this.state.project);\n\n    handleCancelClick = () => this.props.onFormCancel();\n}\n\nconst actionToString = (action: TimerFormAction) => {\n    switch (action) {\n        case TimerFormAction.Create: return \"Create\";\n        case TimerFormAction.Update: return \"Update\";\n    }\n};\n\nexport default TimerForm;\n","import React from \"react\";\n\ninterface Props {\n    timerIsRunning: boolean;\n    onStartClick: () => void;\n    onStopClick: () => void;\n}\n\nconst TimerActionButton: React.FC<Props> = ({ timerIsRunning, onStartClick, onStopClick }) => {\n    if (timerIsRunning) return <div className=\"ui bottom attached red basic button\" onClick={onStopClick}>Stop</div>;\n    else return <div className=\"ui bottom attached green basic button\" onClick={onStartClick}>Start</div>;\n};\n\nexport default TimerActionButton;\n","import React from 'react';\r\nimport TimerActionButton from \"./TimerActionButton\";\r\n\r\ninterface Props {\r\n    timer: Timer;\r\n    onEditClick: () => void;\r\n    onDeleteClick: () => void;\r\n    onStartClick: () => void;\r\n    onStopClick: () => void;\r\n}\r\n\r\nclass TimerComponent extends React.Component<Props> {\r\n    forceUpdateInterval: (number | null) = null;\r\n\r\n    componentDidMount() {\r\n        this.forceUpdateInterval = window.setInterval(() => this.forceUpdate(), 50);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.forceUpdateInterval !== null) {\r\n            clearInterval(this.forceUpdateInterval);\r\n            this.forceUpdateInterval = null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui centered card\">\r\n                <div className=\"content\">\r\n                    <div className=\"header\">{this.props.timer.title}</div>\r\n                    <div className=\"meta\">{this.props.timer.project}</div>\r\n                    <div className=\"center aligned description\">\r\n                        <h2>{this.timeString}</h2>\r\n                    </div>\r\n                    <div className=\"extra content ui icon buttons right floated\">\r\n                        <button className=\"right floated icon compact ui basic button grey\" onClick={this.props.onEditClick}>\r\n                            <i className=\"edit icon\" />\r\n                        </button>\r\n                        <button className=\"right floated icon compact ui basic button red\" onClick={this.props.onDeleteClick}>\r\n                            <i className=\"trash icon\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <TimerActionButton timerIsRunning={this.props.timer.runningSince !== null} onStartClick={this.handleStartClick} onStopClick={this.handleStopClick} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    get timeString() {\r\n        const { elapsedms, runningSince } = this.props.timer;\r\n\r\n        let totalElapsedMS = elapsedms;\r\n\r\n        if (runningSince !== null) {\r\n            totalElapsedMS += Date.now() - runningSince;\r\n        }\r\n\r\n        return millisecondsToHourMinuteSecond(totalElapsedMS);\r\n    }\r\n\r\n    handleStartClick = () => this.props.onStartClick();\r\n\r\n    handleStopClick = () => this.props.onStopClick();\r\n}\r\n\r\nconst millisecondsToHourMinuteSecond = (ms: number): string => {\r\n    const hours = Math.floor(ms / 1000 / 60 / 60);\r\n    const minutes = Math.floor((ms / 1000 / 60) % 60);\r\n    const seconds = Math.floor((ms / 1000) % 60);\r\n\r\n    return [hours, minutes, seconds]\r\n        .map((num) => num < 10 ? `0${num}` : `${num}`)\r\n        .join(\":\");\r\n};\r\n\r\nexport default TimerComponent;\r\n","import React from \"react\";\nimport TimerForm, { TimerFormAction } from \"./TimerForm\";\nimport TimerComponent from \"./TimerComponent\";\n\ninterface Props {\n    timer: Timer;\n    onTimerUpdate: (title: string, project: string) => void;\n    onTimerDelete: () => void;\n    onTimerStart: () => void;\n    onTimerStop: () => void;\n}\n\ninterface State {\n    editing: boolean;\n}\n\nclass EditableTimer extends React.Component<Props, State> {\n    readonly state: Readonly<State> = {\n        editing: false\n    };\n\n    render() {\n        if (this.state.editing) return <TimerForm\n            timer={this.props.timer}\n            action={TimerFormAction.Update}\n            onFormSubmit={this.handleFormUpdate}\n            onFormCancel={this.handleFormCancel}\n        />;\n        else return <TimerComponent\n            timer={this.props.timer}\n            onEditClick={this.handleEditClick}\n            onDeleteClick={this.props.onTimerDelete}\n            onStartClick={this.props.onTimerStart}\n            onStopClick={this.props.onTimerStop}\n        />;\n    }\n\n    handleFormUpdate = (title: string, project: string) => {\n        this.props.onTimerUpdate(title, project);\n        this.setState({ editing: false });\n    };\n\n    handleFormCancel = () => this.setState({ editing: false });\n\n    handleEditClick = () => this.setState({ editing: true });\n}\n\nexport default EditableTimer;\n","import React from 'react';\nimport EditableTimer from \"./EditableTimer\";\n\ninterface Props {\n    timers: Timer[];\n    onTimerUpdate: (id: string, title: string, project: string) => void;\n    onTimerDelete: (id: string) => void;\n    onTimerStart: (id: string) => void;\n    onTimerStop: (id: string) => void;\n}\n\nconst EditableTimerList: React.FC<Props> = ({ timers, onTimerUpdate, onTimerDelete, onTimerStart, onTimerStop }) => (\n    <div id=\"timers\">\n        {timers.map((timer) => (\n            <EditableTimer\n                key={timer.id}\n                timer={timer}\n                onTimerUpdate={(title, project) => onTimerUpdate(timer.id, title, project)}\n                onTimerDelete={() => onTimerDelete(timer.id)}\n                onTimerStart={() => onTimerStart(timer.id)}\n                onTimerStop={() => onTimerStop(timer.id)}\n            />\n        ))}\n    </div>\n);\n\nexport default EditableTimerList;\n","import React from \"react\";\nimport TimerForm, { TimerFormAction } from \"./TimerForm\";\n\ninterface Props {\n    onSubmitNewForm: (title: string, project: string) => void;\n}\n\ninterface State {\n    expanded: boolean;\n}\n\nclass ToggleableTimerForm extends React.Component<Props, State> {\n    readonly state: Readonly<State> = {\n        expanded: false\n    };\n\n    render() {\n        if (this.state.expanded) return <TimerForm action={TimerFormAction.Create} onFormSubmit={this.handleFormSubmit} onFormCancel={this.handleFormCancel} />;\n        else return (\n            <div className=\"ui basic content center aligned segment\">\n                <button className=\"ui basic button icon\" onClick={this.onFormOpen}>\n                    <i className=\"plus icon\" />\n                </button>\n            </div>\n        );\n    }\n\n    onFormOpen = () => this.setState({ expanded: true });\n\n    handleFormSubmit = (title: string, project: string) => {\n        this.props.onSubmitNewForm(title, project);\n        this.setState({ expanded: false });\n    };\n\n    handleFormCancel = () => this.setState({ expanded: false });\n}\n\nexport default ToggleableTimerForm;\n","import React from \"react\";\nimport EditableTimerList from \"./EditableTimerList\";\nimport ToggleableTimerForm from \"./ToggleableTimerForm\";\nimport UUID from \"uuid/v4\";\n\ninterface State {\n    timers: Timer[];\n}\n\nclass TimersDashboard extends React.Component<{}, State> {\n    readonly state: Readonly<State> = {\n        timers: [\n            {\n                id: UUID(),\n                title: \"First Timer\",\n                project: \"Project 1\",\n                elapsedms: 12345678,\n                runningSince: null\n            },\n            {\n                id: UUID(),\n                title: \"Second Timer\",\n                project: \"Project 2\",\n                elapsedms: 3000,\n                runningSince: null\n            }\n        ]\n    };\n\n    render() {\n        return (\n            <div className=\"ui column centered grid\">\n                <div className=\"column\">\n                    <EditableTimerList\n                        timers={this.state.timers}\n                        onTimerUpdate={this.handleTimerUpdate}\n                        onTimerDelete={this.handleTimerDelete}\n                        onTimerStart={this.handleTimerStart}\n                        onTimerStop={this.handleTimerStop}\n                    />\n                    <ToggleableTimerForm onSubmitNewForm={this.handleSubmitNewForm} />\n                </div>\n            </div>\n        );\n    }\n\n    handleTimerUpdate = (id: string, title: string, project: string) => {\n        const timerToUpdate = this.getTimer(id);\n\n        const updatedFields: Partial<Timer> = { title: title, project: project };\n\n        this.updateTimer(id, Object.assign({}, timerToUpdate, updatedFields));\n    };\n\n    handleTimerDelete = (id: string) => {\n        this.setState({ timers: this.state.timers.filter(timer => timer.id !== id) })\n    };\n\n    handleSubmitNewForm = (title: string, project: string) => {\n        const newTimer: Timer = {\n            id: UUID(),\n            title: title,\n            project: project,\n            elapsedms: 0,\n            runningSince: null\n        };\n\n        this.setState({ timers: this.state.timers.concat(newTimer) })\n    };\n\n    handleTimerStart = (id: string) => {\n        const now = Date.now();\n\n        const timerToStart = this.getTimer(id);\n\n        const updatedFields: Partial<Timer> = { runningSince: now };\n\n        this.updateTimer(id, Object.assign({}, timerToStart, updatedFields));\n    };\n\n    handleTimerStop = (id: string) => {\n        const now = Date.now();\n\n        const timerToStop = this.getTimer(id);\n\n        if (timerToStop.runningSince === null) throw new Error();\n\n        const timeSinceStart = now - timerToStop.runningSince;\n\n        const updatedFields: Partial<Timer> = { elapsedms: timerToStop.elapsedms + timeSinceStart, runningSince: null };\n\n        this.updateTimer(id, Object.assign({}, timerToStop, updatedFields));\n    };\n\n    getTimer = (id: string) => {\n        const timer = this.state.timers.find((timer) => timer.id === id);\n        if (timer === undefined) throw new Error();\n\n        return timer;\n    };\n\n    updateTimer = (id: string, updatedTimer: Timer) => this.setState({ timers: this.state.timers.map((timer) => timer.id === id ? updatedTimer : timer) });\n}\n\nexport default TimersDashboard;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"semantic-ui-css/semantic.min.css\";\nimport TimersDashboard from \"./component/TimersDashboard\";\n\nReactDOM.render(<TimersDashboard />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}