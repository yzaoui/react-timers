{"version":3,"sources":["serviceWorker.ts","component/TimerForm.tsx","component/TimerActionButton.tsx","component/TimerComponent.tsx","component/EditableTimer.tsx","component/EditableTimerList.tsx","component/ToggleableTimerForm.tsx","component/TimersDashboard.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TimerFormAction","TimerForm","state","title","_this","props","timer","project","handleTitleChange","e","setState","target","value","handleProjectChange","handleSubmitClick","onFormSubmit","handleCancelClick","onFormCancel","react_default","a","createElement","className","type","this","onChange","onClick","actionToString","action","React","Component","Create","Update","TimerActionButton","_ref","timerIsRunning","onStartClick","onStopClick","TimerComponent","forceUpdateInterval","handleStartClick","handleStopClick","_this2","setInterval","forceUpdate","clearInterval","timeString","onEditClick","onDeleteClick","component_TimerActionButton","runningSince","_this$props$timer","elapsedms","totalElapsedMS","Date","now","millisecondsToHourMinuteSecond","ms","Math","floor","map","num","concat","join","EditableTimer","editing","handleFormUpdate","onTimerUpdate","handleFormCancel","handleEditClick","component_TimerForm","component_TimerComponent","onTimerDelete","onTimerStart","onTimerStop","EditableTimerList","timers","id","component_EditableTimer","key","ToggleableTimerForm","expanded","onFormOpen","handleFormSubmit","onSubmitNewForm","TimersDashboard","UUID","handleTimerUpdate","timerToUpdate","getTimer","updatedFields","updateTimer","Object","assign","handleTimerDelete","filter","handleSubmitNewForm","newTimer","handleTimerStart","timerToStart","handleTimerStop","timerToStop","Error","timeSinceStart","find","undefined","updatedTimer","component_EditableTimerList","component_ToggleableTimerForm","ReactDOM","render","component_TimersDashboard","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63170259.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { ChangeEventHandler } from \"react\";\n\nexport enum TimerFormAction {\n    Create, Update\n}\n\ninterface Props {\n    timer?: Timer;\n    action: TimerFormAction;\n    onFormSubmit: (title: string, project: string) => void;\n    onFormCancel: () => void;\n}\n\ninterface State {\n    title: string;\n    project: string;\n}\n\nclass TimerForm extends React.Component<Props, State> {\n    readonly state: Readonly<State> = {\n        title: this.props.timer ? this.props.timer.title : \"\",\n        project: this.props.timer ? this.props.timer.project : \"\"\n    };\n\n    render() {\n        return <div className=\"ui centered card\">\n            <div className=\"content\">\n                <div className=\"ui form\">\n                    <div className=\"field\">\n                        <label>Title</label>\n                        <input type=\"text\" value={this.state.title} onChange={this.handleTitleChange} />\n                    </div>\n                    <div className=\"field\">\n                        <label>Project</label>\n                        <input type=\"text\" value={this.state.project} onChange={this.handleProjectChange} />\n                    </div>\n                    <div className=\"ui two bottom attached buttons\">\n                        <button className=\"ui basic blue button\" onClick={this.handleSubmitClick}>{actionToString(this.props.action)}</button>\n                        <button className=\"ui basic red button\" onClick={this.handleCancelClick}>Cancel</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n\n    handleTitleChange: ChangeEventHandler<HTMLInputElement> = (e) => this.setState({ title: e.target.value || \"\" });\n\n    handleProjectChange: ChangeEventHandler<HTMLInputElement> = (e) => this.setState({ project: e.target.value || \"\" });\n\n    handleSubmitClick = () => this.props.onFormSubmit(this.state.title, this.state.project);\n\n    handleCancelClick = () => this.props.onFormCancel();\n}\n\nconst actionToString = (action: TimerFormAction) => {\n    switch (action) {\n        case TimerFormAction.Create: return \"Create\";\n        case TimerFormAction.Update: return \"Update\";\n    }\n};\n\nexport default TimerForm;\n","import React from \"react\";\n\ninterface Props {\n    timerIsRunning: boolean;\n    onStartClick: () => void;\n    onStopClick: () => void;\n}\n\nconst TimerActionButton: React.FC<Props> = ({ timerIsRunning, onStartClick, onStopClick }) => {\n    if (timerIsRunning) return <div className=\"ui bottom attached red basic button\" onClick={onStopClick}>Stop</div>;\n    else return <div className=\"ui bottom attached green basic button\" onClick={onStartClick}>Start</div>;\n};\n\nexport default TimerActionButton;\n","import React from 'react';\r\nimport TimerActionButton from \"./TimerActionButton\";\r\n\r\ninterface Props {\r\n    timer: Timer;\r\n    onEditClick: () => void;\r\n    onDeleteClick: () => void;\r\n    onStartClick: () => void;\r\n    onStopClick: () => void;\r\n}\r\n\r\nclass TimerComponent extends React.Component<Props> {\r\n    forceUpdateInterval: (number | null) = null;\r\n\r\n    componentDidMount() {\r\n        this.forceUpdateInterval = window.setInterval(() => this.forceUpdate(), 50);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.forceUpdateInterval !== null) {\r\n            clearInterval(this.forceUpdateInterval);\r\n            this.forceUpdateInterval = null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui centered card\">\r\n                <div className=\"content\">\r\n                    <div className=\"header\">{this.props.timer.title}</div>\r\n                    <div className=\"meta\">{this.props.timer.project}</div>\r\n                    <div className=\"center aligned description\">\r\n                        <h2>{this.timeString}</h2>\r\n                    </div>\r\n                    <div className=\"extra content ui icon buttons right floated\">\r\n                        <button className=\"right floated icon compact ui basic button grey\" onClick={this.props.onEditClick}>\r\n                            <i className=\"edit icon\" />\r\n                        </button>\r\n                        <button className=\"right floated icon compact ui basic button red\" onClick={this.props.onDeleteClick}>\r\n                            <i className=\"trash icon\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <TimerActionButton timerIsRunning={this.props.timer.runningSince !== null} onStartClick={this.handleStartClick} onStopClick={this.handleStopClick} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    get timeString() {\r\n        const { elapsedms, runningSince } = this.props.timer;\r\n\r\n        let totalElapsedMS = elapsedms;\r\n\r\n        if (runningSince !== null) {\r\n            totalElapsedMS += Date.now() - runningSince;\r\n        }\r\n\r\n        return millisecondsToHourMinuteSecond(totalElapsedMS);\r\n    }\r\n\r\n    handleStartClick = () => this.props.onStartClick();\r\n\r\n    handleStopClick = () => this.props.onStopClick();\r\n}\r\n\r\nconst millisecondsToHourMinuteSecond = (ms: number): string => {\r\n    const hours = Math.floor(ms / 1000 / 60 / 60);\r\n    const minutes = Math.floor((ms / 1000 / 60) % 60);\r\n    const seconds = Math.floor((ms / 1000) % 60);\r\n\r\n    return [hours, minutes, seconds]\r\n        .map((num) => num < 10 ? `0${num}` : `${num}`)\r\n        .join(\":\");\r\n};\r\n\r\nexport default TimerComponent;\r\n","import React from \"react\";\nimport TimerForm, { TimerFormAction } from \"./TimerForm\";\nimport TimerComponent from \"./TimerComponent\";\n\ninterface Props {\n    timer: Timer;\n    onTimerUpdate: (title: string, project: string) => void;\n    onTimerDelete: () => void;\n    onTimerStart: () => void;\n    onTimerStop: () => void;\n}\n\ninterface State {\n    editing: boolean;\n}\n\nclass EditableTimer extends React.Component<Props, State> {\n    readonly state: Readonly<State> = {\n        editing: false\n    };\n\n    render() {\n        if (this.state.editing) return <TimerForm\n            timer={this.props.timer}\n            action={TimerFormAction.Update}\n            onFormSubmit={this.handleFormUpdate}\n            onFormCancel={this.handleFormCancel}\n        />;\n        else return <TimerComponent\n            timer={this.props.timer}\n            onEditClick={this.handleEditClick}\n            onDeleteClick={this.props.onTimerDelete}\n            onStartClick={this.props.onTimerStart}\n            onStopClick={this.props.onTimerStop}\n        />;\n    }\n\n    handleFormUpdate = (title: string, project: string) => {\n        this.props.onTimerUpdate(title, project);\n        this.setState({ editing: false });\n    };\n\n    handleFormCancel = () => this.setState({ editing: false });\n\n    handleEditClick = () => this.setState({ editing: true });\n}\n\nexport default EditableTimer;\n","import React from 'react';\nimport EditableTimer from \"./EditableTimer\";\n\ninterface Props {\n    timers: Timer[];\n    onTimerUpdate: (id: string, title: string, project: string) => void;\n    onTimerDelete: (id: string) => void;\n    onTimerStart: (id: string) => void;\n    onTimerStop: (id: string) => void;\n}\n\nconst EditableTimerList: React.FC<Props> = ({ timers, onTimerUpdate, onTimerDelete, onTimerStart, onTimerStop }) => (\n    <div id=\"timers\">\n        {timers.map((timer) => (\n            <EditableTimer\n                key={timer.id}\n                timer={timer}\n                onTimerUpdate={(title, project) => onTimerUpdate(timer.id, title, project)}\n                onTimerDelete={() => onTimerDelete(timer.id)}\n                onTimerStart={() => onTimerStart(timer.id)}\n                onTimerStop={() => onTimerStop(timer.id)}\n            />\n        ))}\n    </div>\n);\n\nexport default EditableTimerList;\n","import React from \"react\";\nimport TimerForm, { TimerFormAction } from \"./TimerForm\";\n\ninterface Props {\n    onSubmitNewForm: (title: string, project: string) => void;\n}\n\ninterface State {\n    expanded: boolean;\n}\n\nclass ToggleableTimerForm extends React.Component<Props, State> {\n    readonly state: Readonly<State> = {\n        expanded: false\n    };\n\n    render() {\n        if (this.state.expanded) return <TimerForm action={TimerFormAction.Create} onFormSubmit={this.handleFormSubmit} onFormCancel={this.handleFormCancel} />;\n        else return (\n            <div className=\"ui basic content center aligned segment\">\n                <button className=\"ui basic button icon\" onClick={this.onFormOpen}>\n                    <i className=\"plus icon\" />\n                </button>\n            </div>\n        );\n    }\n\n    onFormOpen = () => this.setState({ expanded: true });\n\n    handleFormSubmit = (title: string, project: string) => {\n        this.props.onSubmitNewForm(title, project);\n        this.setState({ expanded: false });\n    };\n\n    handleFormCancel = () => this.setState({ expanded: false });\n}\n\nexport default ToggleableTimerForm;\n","import React from \"react\";\nimport EditableTimerList from \"./EditableTimerList\";\nimport ToggleableTimerForm from \"./ToggleableTimerForm\";\nimport UUID from \"uuid/v4\";\n\ninterface State {\n    timers: Timer[];\n}\n\nclass TimersDashboard extends React.Component<{}, State> {\n    readonly state: Readonly<State> = {\n        timers: [\n            {\n                id: UUID(),\n                title: \"First Timer\",\n                project: \"Project 1\",\n                elapsedms: 12345678,\n                runningSince: null\n            },\n            {\n                id: UUID(),\n                title: \"Second Timer\",\n                project: \"Project 2\",\n                elapsedms: 3000,\n                runningSince: null\n            }\n        ]\n    };\n\n    render() {\n        return (\n            <div className=\"ui three column centered grid\">\n                <div className=\"column\">\n                    <EditableTimerList\n                        timers={this.state.timers}\n                        onTimerUpdate={this.handleTimerUpdate}\n                        onTimerDelete={this.handleTimerDelete}\n                        onTimerStart={this.handleTimerStart}\n                        onTimerStop={this.handleTimerStop}\n                    />\n                    <ToggleableTimerForm onSubmitNewForm={this.handleSubmitNewForm} />\n                </div>\n            </div>\n        );\n    }\n\n    handleTimerUpdate = (id: string, title: string, project: string) => {\n        const timerToUpdate = this.getTimer(id);\n\n        const updatedFields: Partial<Timer> = { title: title, project: project };\n\n        this.updateTimer(id, Object.assign({}, timerToUpdate, updatedFields));\n    };\n\n    handleTimerDelete = (id: string) => {\n        this.setState({ timers: this.state.timers.filter(timer => timer.id !== id) })\n    };\n\n    handleSubmitNewForm = (title: string, project: string) => {\n        const newTimer: Timer = {\n            id: UUID(),\n            title: title,\n            project: project,\n            elapsedms: 0,\n            runningSince: null\n        };\n\n        this.setState({ timers: this.state.timers.concat(newTimer) })\n    };\n\n    handleTimerStart = (id: string) => {\n        const now = Date.now();\n\n        const timerToStart = this.getTimer(id);\n\n        const updatedFields: Partial<Timer> = { runningSince: now };\n\n        this.updateTimer(id, Object.assign({}, timerToStart, updatedFields));\n    };\n\n    handleTimerStop = (id: string) => {\n        const now = Date.now();\n\n        const timerToStop = this.getTimer(id);\n\n        if (timerToStop.runningSince === null) throw new Error();\n\n        const timeSinceStart = now - timerToStop.runningSince;\n\n        const updatedFields: Partial<Timer> = { elapsedms: timerToStop.elapsedms + timeSinceStart, runningSince: null };\n\n        this.updateTimer(id, Object.assign({}, timerToStop, updatedFields));\n    };\n\n    getTimer = (id: string) => {\n        const timer = this.state.timers.find((timer) => timer.id === id);\n        if (timer === undefined) throw new Error();\n\n        return timer;\n    };\n\n    updateTimer = (id: string, updatedTimer: Timer) => this.setState({ timers: this.state.timers.map((timer) => timer.id === id ? updatedTimer : timer) });\n}\n\nexport default TimersDashboard;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"semantic-ui-css/semantic.min.css\";\nimport TimersDashboard from \"./component/TimersDashboard\";\n\nReactDOM.render(<TimersDashboard />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}